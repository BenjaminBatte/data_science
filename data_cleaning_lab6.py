# -*- coding: utf-8 -*-
"""
Created on Thu Sep 18 08:56:04 2025

@author: bbatte
"""

# ============================================================
# Lab 6: Data Cleaning and Preparation
# Course: Data Science & Big Data Analytics
# Student: Your Name
# File: lab6_chipotle.py
#
# Purpose:
#   This script cleans and analyzes the Chipotle dataset.
#   Specifically, it:
#     1. Loads the Chipotle dataset (.xls).
#     2. Cleans the 'item_price' column (converts to numeric).
#     3. Computes average prices for chicken and steak items.
#     4. Compares the total revenue generated by chicken vs steak.
#     5. Counts and reports missing values in the dataset.
#
# ============================================================

import pandas as pd

# ------------------------------------------------------------
# 1. Load the dataset
# ------------------------------------------------------------
# Since the dataset is provided as an Excel file,
# we will use pandas.read_excel() to load it.
# Make sure 'Lab 6 - Chipotle.xls' is in the same directory
# as this Python file.
try:
    df = pd.read_excel("Lab 6 - Chipotle.xls")
except FileNotFoundError:
    raise FileNotFoundError("The file 'Lab 6 - Chipotle.xls' was not found in this directory.")

# Display the first few rows of the dataset to confirm load success
print("=== Preview of Dataset ===")
print(df.head(), "\n")

# ------------------------------------------------------------
# 2. Clean and convert 'item_price' column
# ------------------------------------------------------------
# The 'item_price' column usually contains strings like "$8.49".
# Steps:
#   - Remove any dollar signs and commas using regex.
#   - Convert the column to float to allow mathematical operations.
#   - Errors (if any) will raise an exception for safety.
df['item_price'] = df['item_price'].replace('[\$,]', '', regex=True).astype(float)

# Confirm conversion by checking datatype and first 5 values
print("=== 'item_price' Column (After Conversion) ===")
print(df['item_price'].head())
print("Data type of 'item_price':", df['item_price'].dtype, "\n")

# ------------------------------------------------------------
# 3. Average price of items containing 'chicken'
# ------------------------------------------------------------
# Use str.contains() to filter rows where 'item_name' has 'chicken'.
#   - case=False makes search case-insensitive.
#   - mean() computes the average price.
chicken_avg_price = (
    df[df['item_name'].str.contains('chicken', case=False)]['item_price'].mean()
)

print("=== Average Price of Chicken Items ===")
print(f"Average price of items containing 'chicken': ${chicken_avg_price:.2f}\n")

# ------------------------------------------------------------
# 4. Average price of items containing 'steak'
# ------------------------------------------------------------
steak_avg_price = (
    df[df['item_name'].str.contains('steak', case=False)]['item_price'].mean()
)

print("=== Average Price of Steak Items ===")
print(f"Average price of items containing 'steak': ${steak_avg_price:.2f}\n")

# ------------------------------------------------------------
# 5. Compare total revenue: chicken vs steak
# ------------------------------------------------------------
# Revenue = sum of item_price for each group.
chicken_revenue = df[df['item_name'].str.contains('chicken', case=False)]['item_price'].sum()
steak_revenue = df[df['item_name'].str.contains('steak', case=False)]['item_price'].sum()

print("=== Revenue Comparison ===")
print(f"Total revenue from chicken items: ${chicken_revenue:,.2f}")
print(f"Total revenue from steak items:   ${steak_revenue:,.2f}")

if chicken_revenue > steak_revenue:
    print("✅ Chicken items produced more total revenue.\n")
elif steak_revenue > chicken_revenue:
    print("✅ Steak items produced more total revenue.\n")
else:
    print("✅ Both chicken and steak items produced the same revenue.\n")

# ------------------------------------------------------------
# 6. Missing values analysis
# ------------------------------------------------------------
# .isnull().sum().sum() → total missing values in dataset.
# .isnull().sum() → missing values per column.
# Count total missing values across the whole dataset
# total_missing = df.isnull().values.sum() this also work as line bellow
total_missing = df.isnull().sum().sum()
missing_per_column = df.isnull().sum()

print("=== Missing Values Analysis ===")
print(f"Total missing values in the dataset: {total_missing}\n")
print("Missing values per column:")
print(missing_per_column)
print("\n")


